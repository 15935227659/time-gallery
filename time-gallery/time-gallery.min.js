'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *  @Width: 画布宽
 *  @Height: 画布高
 *  @isState: 是否启动 Stage.js 测试FPS, 依赖 stage.js
 *  @isLog: 是否打印数据结构
 *  @direction: 可设置水平(horizontal)或垂直(vertical)
 *  @resourcesPath: 图片资源加载的默认路劲
 *  @resources: 图片资源
 *  @sprites: 自定义雪碧图数据数组，方便创建数据的时候可随时调用雪碧图
 *  @data: 创建画布数据
 *  @onInit: 初始化后的回调
 *  @onEnd: 结束后的回调
 *  @onTickStart: 每一帧的开始前回调
 *  @onTickEnd: 每一帧的结束后回调
 *  @mapStart: 定义画布始点位置
 *  @mapActive: 定义画布当前的播放的位置（可方便测试）
 *  @mapEnd: 画布默认结束位置，默认是 animatePlayEnd 最大值或地图的高度
 *  @mapPlay: 定义画布播放动画的位置（默认元素再屏幕底部的位置开始播放动画）
 *  @touchSpeed: 定义用户滑动速度，越大，滑动的速度越快
 *  @autoPlay: 是否自动播放
 *  @autoSpeed: 自动播放速度
 */

var TimeGallery = function () {
    function TimeGallery(options) {
        _classCallCheck(this, TimeGallery);

        if (options.id === '') {
            console.error('ID not exist');
        }

        this.width = options.width || window.innerWidth;
        this.height = options.height || window.innerHeight;
        this._stage = new createjs.Stage(document.getElementById(options.id));
        this._stage.canvas.width = this.width;
        this._stage.canvas.height = this.height;
        this._loadQueue = null;
        this._isLoading = false;
        this._isEnd = false;
        this._dirGroup = {
            horizontal: 'horizontal',
            vertical: 'vertical'
        };

        this.isVertical = (options.direction || this._dirGroup.vertical) === this._dirGroup.vertical;
        this.isMoving = false;
        this.isState = options.isState || false;
        this.isLog = options.isLog || false;

        this.autoPlay = options.autoPlay || false;
        this.autoSpeed = options.autoSpeed || 1;

        this.resourcesPath = options.resourcesPath || '';
        this.resources = options.resources || [];
        this.sprites = options.sprites || {};
        this.data = options.data || [];

        this.onInit = options.onInit || null;
        this.onEnd = options.onEnd || null;
        this.onTickStart = options.onTickStart || null;
        this.onTickEnd = options.onTickEnd || null;

        this.mapStart = options.mapStart || 0;
        this.mapActive = options.mapActive || 0;
        this.mapEnd = options.mapEnd || 0;
        this.mapPlay = options.mapPlay || (this.isVertical ? this.height : this.width);

        this.objects = {};
        this.animatorsGroup = []; // 执行动画的数组
        this.touchData = {
            touchstart: 0, // TouchStart 初始 Y 位置
            touchmove: 0, // TouchMove  初始 Y 距离
            friction: 0.92, // 摩擦值
            speed: options.touchSpeed || 1, // Touch 滑动速度
            isInertance: false // 惯性
        };

        this.init();
    }

    _createClass(TimeGallery, [{
        key: 'init',
        value: function init() {
            var _this = this;

            this._preload(this.resources, {
                path: this.resourcesPath,
                onComplete: function onComplete() {

                    if (typeof _this.sprites === 'function') _this.sprites = _this.sprites(_this);
                    if (typeof _this.data === 'function') _this.data = _this.data(_this);

                    var data = [{
                        id: 'map',
                        children: _this.data
                    }];

                    // 渲染图像数据
                    _this._render(data, null, function (displayObject, obj) {
                        if (displayObject) {
                            if (obj.animation) {
                                displayObject.animation = _this._createAnimate(displayObject, obj.animation);
                                _this.animatorsGroup.push({ displayObject: displayObject });
                            }
                        }
                    });

                    _this.map = _this.objects['map'];

                    var mapActive = _this.mapActive ? -_this.mapActive : -_this.mapStart;

                    if (_this.isVertical) {
                        _this.map.y = mapActive;
                    } else {
                        _this.map.x = mapActive;
                    }

                    if (!_this.mapEnd) {
                        var mapLong = void 0;
                        if (_this.isVertical) {
                            mapLong = _this.map.getBounds().height + _this.map.getBounds().y - _this.height;
                        } else {
                            mapLong = _this.map.getBounds().width + _this.map.getBounds().x - _this.width;
                        }
                        var maxAnimatePlayEnd = Math.max.apply(Math, _this.animatorsGroup.map(function (item) {
                            return item.displayObject.animation.animatePlayEnd;
                        }));
                        _this.mapEnd = Math.max(mapLong, maxAnimatePlayEnd);
                    }

                    // 初始化滑动事件
                    _this._initTouchEvent();

                    if (_this.onInit) _this.onInit();

                    // 是否打印 FPS 状态，依赖 state.js
                    if (_this.isState) _this._stats();

                    _this._stage.update();
                }
            });

            createjs.Ticker.timingMode = createjs.Ticker.RAF;
        }
    }, {
        key: 'play',
        value: function play() {
            createjs.Ticker.addEventListener('tick', this._onTick.bind(this));
        }
    }, {
        key: 'replay',
        value: function replay() {
            this._isEnd = false;

            this.touchData.touchstart = 0;
            this.touchData.touchmove = 0;
            this.touchData.isInertance = false;

            if (this.isVertical) {
                this.map.y = -this.mapStart;
            } else {
                this.map.x = -this.mapStart;
            }

            this.animatorsGroup.forEach(function (item) {
                item.displayObject.animation.set(0);
            });

            this._stage.update();

            this.play();
        }
    }, {
        key: 'stop',
        value: function stop() {
            createjs.Ticker.removeAllEventListeners();
        }
    }, {
        key: 'getImage',
        value: function getImage(id) {
            return this._loadQueue[id];
        }
    }, {
        key: '_onTick',
        value: function _onTick() {
            if (!this._isLoading && this.map) {

                if (this.autoPlay || this.isMoving) {

                    if (this.onTickStart) this.onTickStart(this);

                    var pos = void 0;

                    if (this.autoPlay) {
                        if (this.isVertical) {
                            this.map.y -= this.autoSpeed;
                            pos = -this.map.y;
                        } else {
                            this.map.x -= this.autoSpeed;
                            pos = -this.map.x;
                        }

                        if (this.touchData.touchmove !== 0) {
                            this.touchData.touchstart = 0;
                            this.touchData.touchmove = 0;
                            this.touchData.isInertance = false;
                            this.isMoving = false;
                        }
                    } else if (this.isMoving) {

                        // 如果是惯性
                        if (this.touchData.isInertance) {
                            // 惯性减速
                            this.touchData.touchmove *= this.touchData.friction;

                            if (Math.abs(this.touchData.touchmove) <= 1) {
                                this.touchData.touchstart = 0;
                                this.touchData.touchmove = 0;
                                this.touchData.isInertance = false;
                                this.isMoving = false;
                            }
                        }

                        // 根据滑动的位置记录动画执行
                        if (this.isVertical) {
                            this.map.y += this.touchData.touchmove * this.touchData.speed;
                            pos = -this.map.y;
                        } else {
                            this.map.x += this.touchData.touchmove * this.touchData.speed;
                            pos = -this.map.x;
                        }
                    }

                    if (pos < this.mapStart) {
                        if (this.isVertical) {
                            this.map.y = -this.mapStart;
                        } else {
                            this.map.x = -this.mapStart;
                        }
                    }

                    if (pos > this.mapEnd) {

                        if (this._isEnd) return;

                        this._isEnd = true;

                        if (this.isVertical) {
                            this.map.y = -this.mapEnd;
                        } else {
                            this.map.x = -this.mapEnd;
                        }

                        if (this.onEnd) {
                            this.onEnd();
                            this.stop();
                        }
                    }

                    this.mapActive = this.isVertical ? -this.map.y : -this.map.x;

                    this._updateAnimators();
                }

                if (this.isState) {
                    this.stats.update();
                }
            }
        }
    }, {
        key: '_updateAnimators',
        value: function _updateAnimators() {
            var pos = this.isVertical ? -this.map.y : -this.map.x;

            this.animatorsGroup.map(function (obj) {
                var displayObject = obj.displayObject;
                var animatePlayStart = displayObject.animation.animatePlayStart;
                var animatePlayEnd = displayObject.animation.animatePlayEnd;

                if (pos >= animatePlayStart && pos < animatePlayEnd) {
                    var duration = Math.abs(pos - animatePlayStart);
                    displayObject.animation.update(duration);
                } else if (pos < animatePlayStart) {
                    displayObject.animation.update(0);
                } else if (pos > animatePlayEnd) {
                    displayObject.animation.update(animatePlayEnd - animatePlayStart);
                }
            });

            if (this.onTickEnd) this.onTickEnd(this);

            this._stage.update();
        }

        // 初始化手势

    }, {
        key: '_initTouchEvent',
        value: function _initTouchEvent() {
            var _this2 = this;

            this._stage.canvas.addEventListener('touchstart', function (e) {

                if (_this2.autoPlay) return;

                if (_this2.isVertical) {
                    _this2.touchData.touchstart = e.touches[0].clientY;
                } else {
                    _this2.touchData.touchstart = e.touches[0].clientX;
                }

                _this2.touchData.isInertance = false;
                _this2.isMoving = false;
            });

            this._stage.canvas.addEventListener('touchmove', function (e) {
                if (_this2.isVertical) {
                    _this2.touchData.touchmove = e.touches[0].clientY - _this2.touchData.touchstart;
                    _this2.touchData.touchstart = e.touches[0].clientY;
                } else {
                    _this2.touchData.touchmove = e.touches[0].clientX - _this2.touchData.touchstart;
                    _this2.touchData.touchstart = e.touches[0].clientX;
                }
                _this2.isMoving = true;
            });

            this._stage.canvas.addEventListener('touchend', function () {
                if (_this2.autoPlay) return;
                _this2.touchData.isInertance = true;
            });
        }
    }, {
        key: '_preload',
        value: function _preload() {
            var _this3 = this;

            var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$onComplete = _ref.onComplete,
                onComplete = _ref$onComplete === undefined ? function () {} : _ref$onComplete,
                _ref$onProgress = _ref.onProgress,
                onProgress = _ref$onProgress === undefined ? function () {} : _ref$onProgress,
                _ref$path = _ref.path,
                path = _ref$path === undefined ? '' : _ref$path;

            this._isLoading = true;

            var fileList = null;

            if (Array.isArray(manifest)) {
                if (manifest.length === 0) return;
                fileList = manifest;
            } else if (typeof manifest === 'string') {
                fileList = [{
                    src: manifest,
                    id: manifest
                }];
            } else if ((typeof manifest === 'undefined' ? 'undefined' : _typeof(manifest)) === 'object') {
                if (!manifest.id) {
                    manifest.id = manifest.src;
                }
                fileList = [manifest];
            } else {
                return false;
            }

            var loadedNumber = 0;
            var preloadNumber = fileList.length;
            var images = {};

            var _loop = function _loop(i) {
                var image = new Image();
                var file = fileList[i];
                var fileType = typeof file === 'undefined' ? 'undefined' : _typeof(file);
                var src = '';

                if (fileType === 'object') {
                    src = file.src;
                } else if (fileType === 'string') {
                    src = file;
                }

                image.src = path + src;
                image.onload = function () {
                    if (file.id) {
                        images[file.id] = image;
                    } else {
                        images[src] = image;
                    }
                    loadedNumber++;

                    var progress = Math.floor(loadedNumber / preloadNumber * 100);
                    onProgress(progress);

                    if (progress >= 100) {
                        _this3._isLoading = false;
                        _this3._loadQueue = images;
                        onComplete();
                    }
                };
            };

            for (var i = 0; i < preloadNumber; i++) {
                _loop(i);
            }

            // 基于 PreloadJs
            // this._loadQueue = new createjs.LoadQueue(true, path);
            //
            // if (progress) this._loadQueue.on('progress', e => onProgress(e));
            //
            // this._loadQueue.on('complete', e => {
            //     this._isLoading = false;
            //     if (onComplete) onComplete(e);
            // });
            //
            // this._loadQueue.loadManifest(loadManifest);
        }
    }, {
        key: '_addObj',
        value: function _addObj() {
            var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


            var displayObject = null;

            switch (obj.type) {
                case 'shape':
                    displayObject = new createjs.Shape();
                    break;
                case 'bitmap':
                    if (obj.image) {
                        displayObject = new createjs.Bitmap(obj.image);
                    }
                    break;
                case 'text':
                    displayObject = new createjs.Text();
                    break;
                case 'sprite':
                    if (obj.sheet) {
                        var spriteSheet = new createjs.SpriteSheet(obj.sheet);
                        displayObject = new createjs.Sprite(spriteSheet);
                    }
                    break;
                default:
                    displayObject = new createjs.Container();
                    break;
            }

            if (obj.type) {
                displayObject.type = obj.type;
            } else {
                displayObject.type = 'container';
            }

            if (obj.id) displayObject.name = obj.id;

            if (obj.parent_id) displayObject.parentId = obj.parent_id;

            if (obj.prop) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.keys(obj.prop)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var propKey = _step.value;

                        // 判断属性类型
                        if (displayObject[propKey] instanceof Object) {
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;

                            try {
                                for (var _iterator2 = Object.keys(obj.prop[propKey])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    var key = _step2.value;

                                    if (typeof displayObject[propKey][key] === 'function') {
                                        var _displayObject$propKe;

                                        (_displayObject$propKe = displayObject[propKey])[key].apply(_displayObject$propKe, _toConsumableArray(obj.prop[propKey][key]));
                                    } else {
                                        displayObject[propKey][key] = obj.prop[propKey][key];
                                    }
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                        _iterator2.return();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }
                        } else if (typeof displayObject[propKey] === 'function') {
                            var _displayObject;

                            (_displayObject = displayObject)[propKey].apply(_displayObject, _toConsumableArray(obj.prop[propKey]));
                        } else {
                            displayObject[propKey] = obj.prop[propKey];
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                if (obj.type === 'text' && obj.prop.align) {
                    switch (obj.prop.align) {
                        case 'center':
                            displayObject.x = (this.width - displayObject.getBounds().width) / 2;
                            break;
                        case 'right':
                            displayObject.x = this.width - displayObject.getBounds().width;
                            break;
                        default:
                            displayObject.x = 0;
                    }
                }
            }

            if (obj.method) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = Object.keys(obj.method)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _displayObject2;

                        var _key = _step3.value;

                        (_displayObject2 = displayObject)[_key].apply(_displayObject2, _toConsumableArray(obj.method[_key]));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }

            if (obj.event) {
                if (obj.event.handle) {
                    var type = obj.event.type || 'click';
                    displayObject.addEventListener(type, obj.event.handle);
                }
            }

            if (displayObject.getBounds()) {
                var bounds = displayObject.getBounds();
                displayObject.width = bounds.width;
                displayObject.height = bounds.height;
            }

            return displayObject;
        }
    }, {
        key: '_render',
        value: function _render() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var _this4 = this;

            var parent_id = arguments[1];
            var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};


            if (data instanceof Object) {
                data = Array.from(data);
            }

            data.map(function (obj) {

                obj.parent_id = parent_id;

                _this4.objects[obj.id] = _this4._addObj(obj);

                if (_this4.isLog) {
                    console.group(obj.id + ':');
                    console.table({
                        x: _this4.objects[obj.id].x,
                        y: _this4.objects[obj.id].y,
                        regX: _this4.objects[obj.id].regX,
                        regY: _this4.objects[obj.id].regY,
                        scaleX: _this4.objects[obj.id].scaleX,
                        scaleY: _this4.objects[obj.id].scaleY,
                        rotation: _this4.objects[obj.id].rotation,
                        alpha: _this4.objects[obj.id].alpha,
                        visible: _this4.objects[obj.id].visible
                    });
                }

                if (parent_id) {
                    _this4.objects[parent_id].addChild(_this4.objects[obj.id]);
                } else {
                    _this4._stage.addChild(_this4.objects[obj.id]);
                }

                // 自定义属性
                if (custom) {
                    custom(_this4.objects[obj.id], obj);
                }

                if (obj.children) {
                    _this4._render(obj.children, obj.id, custom);
                }

                if (_this4.isLog) {
                    console.groupEnd();
                }
            });

            this._stage.update();
        }
    }, {
        key: '_createAnimate',
        value: function _createAnimate(displayObject) {
            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref2$x = _ref2.x,
                x = _ref2$x === undefined ? null : _ref2$x,
                _ref2$y = _ref2.y,
                y = _ref2$y === undefined ? null : _ref2$y,
                _ref2$scaleX = _ref2.scaleX,
                scaleX = _ref2$scaleX === undefined ? null : _ref2$scaleX,
                _ref2$scaleY = _ref2.scaleY,
                scaleY = _ref2$scaleY === undefined ? null : _ref2$scaleY,
                _ref2$skewX = _ref2.skewX,
                skewX = _ref2$skewX === undefined ? null : _ref2$skewX,
                _ref2$skewY = _ref2.skewY,
                skewY = _ref2$skewY === undefined ? null : _ref2$skewY,
                _ref2$rotation = _ref2.rotation,
                rotation = _ref2$rotation === undefined ? null : _ref2$rotation,
                _ref2$alpha = _ref2.alpha,
                alpha = _ref2$alpha === undefined ? 1 : _ref2$alpha,
                _ref2$top = _ref2.top,
                top = _ref2$top === undefined ? 0 : _ref2$top,
                _ref2$duration = _ref2.duration,
                duration = _ref2$duration === undefined ? 0 : _ref2$duration,
                _ref2$sprite = _ref2.sprite,
                sprite = _ref2$sprite === undefined ? [] : _ref2$sprite,
                _ref2$startById = _ref2.startById,
                startById = _ref2$startById === undefined ? null : _ref2$startById,
                _ref2$endById = _ref2.endById,
                endById = _ref2$endById === undefined ? null : _ref2$endById,
                _ref2$afterById = _ref2.afterById,
                afterById = _ref2$afterById === undefined ? null : _ref2$afterById,
                _ref2$musicById = _ref2.musicById,
                musicById = _ref2$musicById === undefined ? null : _ref2$musicById;

            var mapPos = (this.isVertical ? displayObject.y : displayObject.x) + _initAnimatePosition(this),
                // 对象位置
            startX = displayObject.x,
                // 动画 X 开始
            startY = displayObject.y,
                // 动画 Y 开始
            endX = x,
                // 动画 X 结束
            endY = y,
                // 动画 Y 结束
            initAlpha = displayObject.alpha,
                initScaleX = displayObject.scaleX,
                initScaleY = displayObject.scaleY,
                initSkewX = displayObject.skewX,
                initSkewY = displayObject.skewY,
                initRotation = displayObject.rotation,
                isMusic = false,
                isPlay = false;

            var animatePlayStart = 0; // 对象开始执行动画位置
            var animatePlayEnd = 0; // 对象结束执行动画位置

            if (startById) {
                animatePlayStart = this.objects[startById].animation.animatePlayStart;
            } else if (afterById) {
                animatePlayStart = this.objects[afterById].animation.animatePlayEnd;
            } else {
                if (mapPos - top >= this.mapPlay) {
                    animatePlayStart = mapPos - top - this.mapPlay;
                } else {
                    animatePlayStart = this.mapStart;
                }
            }

            if (endById && animatePlayStart < this.objects[endById].animation.animatePlayEnd) {
                animatePlayEnd = this.objects[endById].animation.animatePlayEnd;
                duration = animatePlayEnd - animatePlayStart;
            } else {
                animatePlayEnd = animatePlayStart + duration;
            }

            function _initAnimatePosition(ctx) {
                var sum = 0;

                _countSumY(displayObject);

                return sum;

                function _countSumY(displayObject) {
                    var parent = displayObject.parent;

                    if (parent && parent.parent !== null) {
                        sum += ctx.isVertical ? parent.y : parent.x;
                        _countSumY(parent);
                    }
                }
            }

            function _animate(rate) {

                var progress = rate / duration;

                if (sprite.length > 1) {
                    var length = sprite.length;
                    var durationSegment = duration / length;
                    var currentIndex = Math.min(rate / durationSegment | 0, length - 1);
                    displayObject.image = sprite[currentIndex];
                }

                if (endX || endX === 0) displayObject.x = progress * (endX - startX) + startX;
                if (endY || endY === 0) displayObject.y = progress * (endY - startY) + startY;
                if (alpha || alpha === 0) displayObject.alpha = progress * (alpha - initAlpha) + initAlpha;
                if (scaleX || scaleX === 0) displayObject.scaleX = progress * (scaleX - initScaleX) + initScaleX;
                if (scaleY || scaleY === 0) displayObject.scaleY = progress * (scaleY - initScaleY) + initScaleY;
                if (skewX || skewX === 0) displayObject.skewX = progress * (skewX - initSkewX) + initSkewX;
                if (skewY || skewY === 0) displayObject.skewY = progress * (skewY - initSkewY) + initSkewY;
                if (rotation || rotation === 0) displayObject.rotation = progress * (rotation - initRotation) + initRotation;
            }

            return {
                animatePlayStart: animatePlayStart,
                animatePlayEnd: animatePlayEnd,
                update: function update(rate) {
                    var progress = rate / duration;

                    if ((progress === 0 || progress === 1) && isPlay === false) {
                        return;
                    }

                    if (progress >= 1) {
                        progress = 1;
                        isPlay = false;
                    } else if (progress <= 0) {
                        progress = 0;
                        isPlay = false;
                    } else {
                        isPlay = true;
                    }

                    if (musicById) {
                        var music = document.getElementById(musicById);
                        if (music) {
                            if (isMusic === false) {
                                isMusic = true;
                                music.currentTime = 0;
                                music.play();
                            } else if (isMusic === true && progress === 0) {
                                music.pause();
                                isMusic = false;
                            }

                            if (music.loop && isMusic === true && progress === 1) {
                                music.pause();
                                isMusic = false;
                            }
                        }
                    }

                    _animate(rate);
                },
                set: function set(rate) {
                    if (isPlay) isPlay = false;
                    if (isMusic) isMusic = false;

                    _animate(rate);
                }
            };
        }
    }, {
        key: '_stats',
        value: function _stats() {
            this.stats = new Stats();
            this.stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
            document.body.appendChild(this.stats.dom);
        }
    }]);

    return TimeGallery;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
