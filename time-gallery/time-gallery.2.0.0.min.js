'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *  @Width: 画布宽
 *  @Height: 画布高
 *  @isState: 是否启动 Stage.js 测试FPS, 依赖 stats.js
 *  @isLog: 是否打印数据结构
 *  @isTouch: 是否启动滑动事件
 *  @direction: 可设置水平(horizontal)或垂直(vertical)
 *  @resourcesPath: 图片资源加载的默认路劲
 *  @resources: 图片资源
 *  @sprites: 自定义雪碧图数据数组，方便创建数据的时候可随时调用雪碧图
 *  @data: 创建画布数据
 *  @onInit: 初始化后的回调
 *  @onEnd: 结束后的回调
 *  @onTickStart: 每一帧的开始前回调
 *  @onTickEnd: 每一帧的结束后回调
 *  @onTimeToStart: onTimeTo 开始前回调，可选 TimeGallery 实例作为参数
 *  @onTimeToEnd: onTimeTo 结束后回调，可选 TimeGallery 实例作为参数
 *  @delayTime: 定义画布始点位置
 *  @activeTime: 定义画布当前的播放的位置（可方便测试）
 *  @endTime: 画布默认结束位置，默认是 endPlayTime 最大值或地图的高度
 *  @playLine: 定义元素播放线，即元素滑动到此位置后就开始执行动画（默认元素在屏幕底部的位置开始执行动画）
 *  @touchSpeed: 定义用户滑动速度，越大，滑动的速度越快
 *  @autoPlay: 是否自动播放
 *  @autoSpeed: 自动播放速度
 *  @autoUpdate: 是否自动更新
 */

var TimeGallery = function () {
    function TimeGallery(options) {
        _classCallCheck(this, TimeGallery);

        if (!options.id) return console.error('Canvas id not exist');

        this._stage = new createjs.Stage(document.getElementById(options.id));

        this._loadQueue = null;
        this._isLoading = false;
        this._isEnd = false;
        this._isState = options.isState || false;
        this._isLog = options.isLog || false;
        this._isTouch = options.isTouch !== false;

        this._dirGroup = {
            horizontal: 'horizontal',
            vertical: 'vertical'
        };

        // 定义时间轴的方向
        this._isVertical = (options.direction || this._dirGroup.vertical) === this._dirGroup.vertical;

        // 定义时间轴对象
        this._timeline = null;

        // 定义时间轴延迟时间
        this._delayTime = options.delayTime || 0;

        // 定义时间轴结束的位置
        // 渲染完成后即获取动画组的动画长度与画布长度之间的最大值
        this._endTime = options.endTime || 0;

        // 定义时间轴开始的位置
        this._activeTime = options.activeTime || 0;

        // 定义是否自动播放
        this._autoPlay = options.autoPlay || false;

        // 创建的数据对象
        this._data = options.data || [];

        // 数据实例化对象组
        this._objects = {};

        // 执行动画的数组
        this._animatorsGroup = [];

        // 定义资源默认路劲
        this._resourcesPath = options.resourcesPath || '';

        // 定义资源列表
        this._resources = options.resources || [];
        this._sprites = options.sprites || {};

        // Touch 初始值
        this._touchData = {
            touchstart: 0, // TouchStart 初始 Y 位置
            touchmove: 0, // TouchMove  初始 Y 距离
            friction: 0.92, // 摩擦值
            speed: options.touchSpeed || 1, // Touch 滑动速度
            isInertance: false // 惯性
        };

        this.width = options.width || window.innerWidth;
        this.height = options.height || (this.width ? window.innerHeight / window.innerWidth * this.width : window.innerHeight);
        this.canvas = this._stage.canvas;
        this.canvas.width = this.width;
        this.canvas.height = this.height;

        this.onInit = options.onInit || null;
        this.onEnd = options.onEnd || null;
        this.onTickStart = options.onTickStart || null;
        this.onTickEnd = options.onTickEnd || null;
        this.onTimeToStart = options.onTimeToStart || null;
        this.onTimeToEnd = options.onTimeToEnd || null;

        this.autoSpeed = options.autoSpeed || 1;
        this.autoUpdate = options.autoUpdate || false;

        // 定义动画播放线
        this.playLine = options.playLine || (this._isVertical ? this.height : this.width);

        if (this._isTouch) this._initTouchEvent();

        this.init();
    }

    // 渲染实例


    _createClass(TimeGallery, [{
        key: 'init',
        value: function init() {
            var _this2 = this;

            this._preload(this._resources, {
                path: this._resourcesPath,
                onComplete: function onComplete() {

                    if (typeof _this2._sprites === 'function') _this2._sprites = _this2._sprites(_this2);

                    if (typeof _this2._data === 'function') _this2._data = _this2._data(_this2);

                    var data = [{
                        id: '_timeline',
                        children: [{
                            id: '_timedata',
                            children: _this2._data
                        }]
                    }];

                    // 渲染图像数据
                    _this2._render(data, null, function (displayObject, obj) {
                        if (displayObject) {
                            if (obj.animation) {
                                displayObject.animation = _this2._createAnimate(displayObject, obj.animation);
                                _this2._animatorsGroup.push(displayObject);
                            }
                        }
                    });

                    _this2._timeline = _this2._objects['_timeline'];

                    if (_this2._isVertical) {
                        _this2._objects['_timedata'].y = _this2._delayTime;
                    } else {
                        _this2._objects['_timedata'].x = _this2._delayTime;
                    }

                    // 获取实例最大时间长度
                    if (!_this2._endTime) {
                        var length = void 0,
                            maxEndPlayTime = void 0;

                        if (_this2._isVertical) {
                            length = _this2._timeline.getBounds().height + _this2._timeline.getBounds().y - _this2.height;
                        } else {
                            length = _this2._timeline.getBounds().width + _this2._timeline.getBounds().x - _this2.width;
                        }

                        maxEndPlayTime = Math.max.apply(Math, _this2._animatorsGroup.map(function (displayObject) {
                            return displayObject.animation.endPlayTime;
                        }));

                        _this2._endTime = Math.max(length, maxEndPlayTime);
                    }

                    // 定义当前时间点
                    if (_this2._activeTime) {
                        if (_this2._activeTime < 0) {
                            _this2._activeTime = 0;
                        } else if (_this2._activeTime > _this2._endTime) {
                            _this2._activeTime = _this2._endTime;
                        }

                        var activeTime = -_this2._activeTime;
                        _this2._isVertical ? _this2._timeline.y = activeTime : _this2._timeline.x = activeTime;
                        _this2._updateAnimators();
                    }

                    _this2._stage.update();

                    // 是否打印 FPS 状态，依赖 state.js
                    if (_this2._isState) _this2._stats();

                    // 初始化成功的回调
                    if (_this2.onInit) _this2.onInit();
                }
            });

            createjs.Ticker.timingMode = createjs.Ticker.RAF;
        }

        // 启动实例

    }, {
        key: 'play',
        value: function play() {
            var _this3 = this;

            if (this._tickEvent) this.stop();

            this._tickEvent = function () {
                return _this3._onTick();
            };

            createjs.Ticker.addEventListener('tick', this._tickEvent);
        }

        // 重新开始

    }, {
        key: 'replay',
        value: function replay() {
            this._touchData.touchstart = 0;
            this._touchData.touchmove = 0;
            this._touchData.isInertance = false;

            if (this._isVertical) {
                this._timeline.y = 0;
            } else {
                this._timeline.x = 0;
            }

            this._animatorsGroup.forEach(function (displayObject) {
                displayObject.animation.set(0);
            });

            this._stage.update();

            this.play();
        }

        // 停止实例

    }, {
        key: 'stop',
        value: function stop() {
            createjs.Ticker.removeEventListener('tick', this._tickEvent);
            this._tickEvent = null;
        }

        // 删除 id 数据，包括 id 的子属性

    }, {
        key: 'remove',
        value: function remove(id) {
            var displayObject = this._objects[id];
            var parent = displayObject.parent;

            parent.removeChild(displayObject);

            this._stage.update();
            this._removeObject(id);
        }

        // 摧毁对象，移除所有 Data 对象

    }, {
        key: 'destroy',
        value: function destroy() {
            this.stop();

            this._initTouchData();

            this._stage.removeAllChildren();
            this._stage.update();

            this._objects = {};
            this._animatorsGroup = [];
            this._endTime = 0;
            this._activeTime = 0;
        }

        // 获取当前时间位置

    }, {
        key: 'getActiveTime',
        value: function getActiveTime() {
            return this._activeTime;
        }

        // 获取总时间

    }, {
        key: 'getEndTime',
        value: function getEndTime() {
            return this._endTime;
        }

        // 获取 Data 对象信息

    }, {
        key: 'getObject',
        value: function getObject() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


            if (id === '') return this._objects;

            var displayObject = this._objects[id];

            if (displayObject === undefined) return null;

            var width = displayObject.width,
                height = displayObject.height,
                regX = displayObject.regX,
                regY = displayObject.regY,
                rotation = displayObject.rotation,
                scaleX = displayObject.scaleX,
                scaleY = displayObject.scaleY,
                skewX = displayObject.skewX,
                skewY = displayObject.skewY,
                alpha = displayObject.alpha,
                type = displayObject.type,
                x = displayObject.x,
                y = displayObject.y,
                visible = displayObject.visible;

            var object = {
                id: id,
                width: width,
                height: height,
                regX: regX,
                regY: regY,
                rotation: rotation,
                scaleX: scaleX,
                scaleY: scaleY,
                skewX: skewX,
                skewY: skewY,
                alpha: alpha,
                type: type,
                x: x,
                y: y,
                visible: visible,
                target: displayObject
            };

            if (this._isVertical) {
                object.y = this._getObjectTime(displayObject);
            } else {
                object.x = this._getObjectTime(displayObject);
            }

            if (displayObject.animation) {
                object.animation = displayObject.animation;
            }

            return object;
        }

        // 获取图片资源信息

    }, {
        key: 'getImage',
        value: function getImage() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


            if (id === '') return this._loadQueue;

            return this._loadQueue[id];
        }
    }, {
        key: 'getSprite',
        value: function getSprite() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


            if (id === '') return this._sprites;

            return this._sprites[id];
        }
    }, {
        key: 'timeTo',
        value: function timeTo(time) {
            var _this4 = this;

            var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var callback = arguments[2];


            var timeToPos = 0;

            if (typeof time === 'string') {
                var prefix = time[0];
                switch (prefix) {
                    case '+':
                    case '-':
                        timeToPos = this._activeTime + parseInt(time);
                        break;
                    default:
                        // timeToPos = this._getObjectTime(this._objects[time])
                        return;
                }
            } else if (typeof time === 'number') {
                timeToPos = time;
            } else {
                return;
            }

            if (this._activeTime === timeToPos) return;

            if (this.onTimeToStart) this.onTimeToStart(this);

            if (duration === 0) {

                this._activeTime = timeToPos;

                if (this._isVertical) {
                    this._timeline.y = -this._activeTime;
                } else {
                    this._timeline.x = -this._activeTime;
                }

                this._updateAnimators();

                this._stage.update();

                this._onTimeToEnd(callback);
            } else {

                this.stop();

                var startDate = new Date().getTime();
                var activeDate = 0;
                var timeToDir = 1;
                var timeToStart = 0;
                var timeToMove = 0;
                var timeToProgress = 0;
                var timeToDistance = Math.abs(this._activeTime - timeToPos);

                // 判断滑动方向
                if (this._activeTime > timeToPos) timeToDir = -1;

                // 定义滑动 Ticker 事件
                this._tickEvent = function () {

                    if (_this4.onTickStart) _this4.onTickStart(_this4);

                    activeDate = new Date().getTime();
                    timeToProgress = (activeDate - startDate) / duration;
                    timeToMove = Math.floor(timeToProgress * timeToDistance) * timeToDir;

                    if (timeToMove > timeToDistance) timeToMove = timeToDistance;

                    _this4._activeTime += timeToMove - timeToStart;

                    timeToStart = timeToMove;

                    if (_this4._activeTime < 0) {

                        if (_this4._isVertical) {
                            _this4._activeTime = 0;
                        } else {
                            _this4._activeTime = 0;
                        }

                        _this4._onTimeToEnd(callback);
                    } else if (_this4._activeTime >= _this4._endTime) {

                        _this4._activeTime = _this4._endTime;

                        _this4._onTimeToEnd(callback);

                        _this4._isEnd = true;

                        if (_this4.onEnd) _this4.onEnd();
                    } else if (timeToProgress >= 1) {
                        _this4._onTimeToEnd(callback);
                    }

                    if (_this4._isVertical) {
                        _this4._timeline.y = -_this4._activeTime;
                    } else {
                        _this4._timeline.x = -_this4._activeTime;
                    }

                    _this4._updateAnimators();

                    if (_this4.onTickEnd) _this4.onTickEnd(_this4);

                    _this4._stage.update();
                };

                createjs.Ticker.addEventListener('tick', this._tickEvent);
            }
        }
    }, {
        key: '_onTimeToEnd',
        value: function _onTimeToEnd(callback) {
            if (this._touchData.touchmove !== 0) this._initTouchData();
            if (this.onTimeToEnd) this.onTimeToEnd(this);
            if (callback) callback(this);
            this.play();
        }
    }, {
        key: '_onTick',
        value: function _onTick() {
            if (!this._isLoading && this._timeline) {

                if (this.autoUpdate && this.onTickStart) this.onTickStart(this);

                if (this._autoPlay || this._touchData.isMoving) {

                    if (!this.autoUpdate && this.onTickStart) this.onTickStart(this);

                    var activeTime = void 0;

                    if (this._touchData.isMoving) {

                        // 如果是惯性
                        if (this._touchData.isInertance) {
                            // 惯性减速
                            this._touchData.touchmove *= this._touchData.friction;

                            if (Math.abs(this._touchData.touchmove) <= 1) this._initTouchData();
                        }

                        // 根据滑动的位置记录动画执行
                        if (this._isVertical) {
                            this._timeline.y += this._touchData.touchmove * this._touchData.speed;
                            activeTime = -this._timeline.y;
                        } else {
                            this._timeline.x += this._touchData.touchmove * this._touchData.speed;
                            activeTime = -this._timeline.x;
                        }

                        this._updateTime(activeTime);
                    } else {

                        if (this._isVertical) {
                            this._timeline.y -= this.autoSpeed;
                            activeTime = -this._timeline.y;
                        } else {
                            this._timeline.x -= this.autoSpeed;
                            activeTime = -this._timeline.x;
                        }

                        this._updateTime(activeTime);
                    }

                    if (this.onTickEnd) this.onTickEnd(this);

                    if (!this.autoUpdate) this._stage.update();
                }

                if (this.autoUpdate) this._stage.update();

                if (this._isState) this.stats.update();
            }
        }
    }, {
        key: '_updateTime',
        value: function _updateTime(activeTime) {

            if (activeTime < this._endTime) {
                this._isEnd = false;
            }

            if (activeTime < 0) {

                activeTime = 0;

                if (this._isVertical) {
                    this._timeline.y = 0;
                } else {
                    this._timeline.x = 0;
                }
            } else if (activeTime > this._endTime) {

                activeTime = this._endTime;

                if (this._isVertical) {
                    this._timeline.y = -this._endTime;
                } else {
                    this._timeline.x = -this._endTime;
                }

                if (this._isEnd) return;

                this._isEnd = true;

                if (this.onEnd) this.onEnd();
            }

            this._activeTime = activeTime;

            this._updateAnimators();
        }
    }, {
        key: '_updateAnimators',
        value: function _updateAnimators() {
            var pos = this._isVertical ? -this._timeline.y : -this._timeline.x;

            this._animatorsGroup.map(function (displayObject) {
                var startPlayTime = displayObject.animation.startPlayTime;
                var endPlayTime = displayObject.animation.endPlayTime;

                if (pos >= startPlayTime && pos < endPlayTime) {
                    displayObject.animation.update(Math.abs(pos - startPlayTime));
                } else if (pos < startPlayTime) {
                    displayObject.animation.set(0);
                } else if (pos >= endPlayTime) {
                    displayObject.animation.set(endPlayTime - startPlayTime);
                }
            });

            if (this.onTickEnd) this.onTickEnd(this);
        }
    }, {
        key: '_preload',
        value: function _preload() {
            var _this5 = this;

            var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$onComplete = _ref.onComplete,
                onComplete = _ref$onComplete === undefined ? function () {} : _ref$onComplete,
                _ref$onProgress = _ref.onProgress,
                onProgress = _ref$onProgress === undefined ? function () {} : _ref$onProgress,
                _ref$path = _ref.path,
                path = _ref$path === undefined ? '' : _ref$path;

            this._isLoading = true;

            var fileList = null;

            if (Array.isArray(manifest)) {
                if (manifest.length === 0) return;
                fileList = manifest;
            } else if (typeof manifest === 'string') {
                fileList = [{
                    src: manifest,
                    id: manifest
                }];
            } else if ((typeof manifest === 'undefined' ? 'undefined' : _typeof(manifest)) === 'object') {
                if (!manifest.id) {
                    manifest.id = manifest.src;
                }
                fileList = [manifest];
            } else {
                return false;
            }

            var loadedNumber = 0;
            var preloadNumber = fileList.length;
            var images = {};

            var _loop = function _loop(i) {
                var image = new Image();
                var file = fileList[i];
                var fileType = typeof file === 'undefined' ? 'undefined' : _typeof(file);
                var src = '';

                if (fileType === 'object') {
                    src = file.src;
                } else if (fileType === 'string') {
                    src = file;
                }

                image.src = path + src;
                image.onload = function () {

                    if (file.id) {
                        images[file.id] = image;
                    } else {
                        images[src] = image;
                    }

                    loadedNumber++;

                    var progress = Math.floor(loadedNumber / preloadNumber * 100);

                    onProgress(progress);

                    if (progress >= 100) {
                        _this5._isLoading = false;
                        _this5._loadQueue = images;
                        onComplete();
                    }
                };
            };

            for (var i = 0; i < preloadNumber; i++) {
                _loop(i);
            }

            // 基于 PreloadJs
            // this._loadQueue = new createjs.LoadQueue(true, path);
            //
            // if (progress) this._loadQueue.on('progress', e => onProgress(e));
            //
            // this._loadQueue.on('complete', e => {
            //     this._isLoading = false;
            //     if (onComplete) onComplete(e);
            // });
            //
            // this._loadQueue.loadManifest(loadManifest);
        }
    }, {
        key: '_addObject',
        value: function _addObject() {
            var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


            var displayObject = null;

            switch (obj.type) {
                case 'shape':

                    displayObject = new createjs.Shape();

                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = Object.keys(obj.graphics)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var key = _step.value;

                            if (Array.isArray(obj.graphics[key])) {
                                var _displayObject$graphi;

                                (_displayObject$graphi = displayObject.graphics)[key].apply(_displayObject$graphi, _toConsumableArray(obj.graphics[key]));
                            } else if (obj.graphics[key] instanceof Object) {
                                displayObject.graphics[key](obj.graphics[key]);
                            } else {
                                displayObject.graphics[key](obj.graphics[key]);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    break;
                case 'bitmap':
                    if (obj.image) {
                        displayObject = new createjs.Bitmap(obj.image);
                    }
                    break;
                case 'text':
                    displayObject = new createjs.Text();
                    break;
                case 'sprite':
                    if (obj.sheet) {
                        var spriteSheet = new createjs.SpriteSheet(obj.sheet);
                        displayObject = new createjs.Sprite(spriteSheet);
                    }
                    break;
                default:
                    displayObject = new createjs.Container();
                    break;
            }

            if (obj.type) {
                displayObject.type = obj.type;
            } else {
                displayObject.type = 'container';
            }

            if (obj.id) displayObject.name = obj.id;

            if (obj.parent_id) displayObject.parentId = obj.parent_id;

            if (obj.prop) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = Object.keys(obj.prop)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var propKey = _step2.value;

                        // 判断属性类型
                        if (displayObject[propKey] instanceof Object) {
                            var _iteratorNormalCompletion3 = true;
                            var _didIteratorError3 = false;
                            var _iteratorError3 = undefined;

                            try {
                                for (var _iterator3 = Object.keys(obj.prop[propKey])[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                    var _key = _step3.value;

                                    if (typeof displayObject[propKey][_key] === 'function') {
                                        var _displayObject$propKe;

                                        (_displayObject$propKe = displayObject[propKey])[_key].apply(_displayObject$propKe, _toConsumableArray(obj.prop[propKey][_key]));
                                    } else {
                                        displayObject[propKey][_key] = obj.prop[propKey][_key];
                                    }
                                }
                            } catch (err) {
                                _didIteratorError3 = true;
                                _iteratorError3 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                        _iterator3.return();
                                    }
                                } finally {
                                    if (_didIteratorError3) {
                                        throw _iteratorError3;
                                    }
                                }
                            }
                        } else if (typeof displayObject[propKey] === 'function') {
                            var _displayObject;

                            (_displayObject = displayObject)[propKey].apply(_displayObject, _toConsumableArray(obj.prop[propKey]));
                        } else {
                            displayObject[propKey] = obj.prop[propKey];
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                if (obj.type === 'text' && obj.prop.align) {
                    switch (obj.prop.align) {
                        case 'center':
                            displayObject.x = (this.width - displayObject.getBounds().width) / 2;
                            break;
                        case 'right':
                            displayObject.x = this.width - displayObject.getBounds().width;
                            break;
                        default:
                            displayObject.x = 0;
                    }
                }
            }

            if (obj.method) {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = Object.keys(obj.method)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var _displayObject2;

                        var _key2 = _step4.value;

                        (_displayObject2 = displayObject)[_key2].apply(_displayObject2, _toConsumableArray(obj.method[_key2]));
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }

            if (obj.event) {
                if (obj.event.handle) {
                    var type = obj.event.type || 'click';
                    displayObject.addEventListener(type, obj.event.handle);
                }
            }

            if (displayObject.getBounds()) {
                var bounds = displayObject.getBounds();
                displayObject.width = bounds.width;
                displayObject.height = bounds.height;
            }

            return displayObject;
        }
    }, {
        key: '_removeObject',
        value: function _removeObject(id) {
            var _this6 = this;

            var displayObject = this._objects[id];

            delete this._objects[id];

            if (displayObject.animation) {
                this._removeAnimator(displayObject.name);
            }

            var children = displayObject.children;

            if (children) {
                children.forEach(function (child) {
                    delete _this6._objects[child.name];
                    if (child.children) {
                        _this6._removeObject(child);
                    }

                    if (child.animation) {
                        _this6._removeAnimator(child.name);
                    }
                });
            }
        }
    }, {
        key: '_removeAnimator',
        value: function _removeAnimator(id) {
            for (var i = 0, len = this._animatorsGroup.length; i < len; i++) {
                if (this._animatorsGroup[i].name === id) {
                    this._animatorsGroup.splice(i, 1);
                    return;
                }
            }
        }
    }, {
        key: '_render',
        value: function _render() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var _this7 = this;

            var parent_id = arguments[1];
            var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};


            if (data instanceof Object) {
                data = Array.from(data);
            }

            data.map(function (obj, index) {

                obj.parent_id = parent_id;

                if (obj.id === undefined) obj.id = parent_id + '_' + index;

                if (_this7._objects[obj.id]) {
                    console.error('Data id:\'' + obj.id + '\' is it exists already');
                    return;
                }

                _this7._objects[obj.id] = _this7._addObject(obj);

                if (_this7._isLog) {
                    console.group(obj.id + ':');
                    console.table({
                        x: _this7._objects[obj.id].x,
                        y: _this7._objects[obj.id].y,
                        regX: _this7._objects[obj.id].regX,
                        regY: _this7._objects[obj.id].regY,
                        scaleX: _this7._objects[obj.id].scaleX,
                        scaleY: _this7._objects[obj.id].scaleY,
                        rotation: _this7._objects[obj.id].rotation,
                        alpha: _this7._objects[obj.id].alpha,
                        visible: _this7._objects[obj.id].visible
                    });
                }

                if (parent_id) {
                    _this7._objects[parent_id].addChild(_this7._objects[obj.id]);
                } else {
                    _this7._stage.addChild(_this7._objects[obj.id]);
                }

                // 自定义属性
                if (custom) {
                    custom(_this7._objects[obj.id], obj);
                }

                if (obj.children) {
                    _this7._render(obj.children, obj.id, custom);
                }

                if (_this7._isLog) {
                    console.groupEnd();
                }
            });

            this._stage.update();
        }
    }, {
        key: '_createAnimate',
        value: function _createAnimate(displayObject) {
            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref2$x = _ref2.x,
                x = _ref2$x === undefined ? null : _ref2$x,
                _ref2$y = _ref2.y,
                y = _ref2$y === undefined ? null : _ref2$y,
                _ref2$scaleX = _ref2.scaleX,
                scaleX = _ref2$scaleX === undefined ? null : _ref2$scaleX,
                _ref2$scaleY = _ref2.scaleY,
                scaleY = _ref2$scaleY === undefined ? null : _ref2$scaleY,
                _ref2$skewX = _ref2.skewX,
                skewX = _ref2$skewX === undefined ? null : _ref2$skewX,
                _ref2$skewY = _ref2.skewY,
                skewY = _ref2$skewY === undefined ? null : _ref2$skewY,
                _ref2$rotation = _ref2.rotation,
                rotation = _ref2$rotation === undefined ? null : _ref2$rotation,
                _ref2$alpha = _ref2.alpha,
                alpha = _ref2$alpha === undefined ? 1 : _ref2$alpha,
                _ref2$top = _ref2.top,
                top = _ref2$top === undefined ? 0 : _ref2$top,
                _ref2$delay = _ref2.delay,
                delay = _ref2$delay === undefined ? 0 : _ref2$delay,
                _ref2$duration = _ref2.duration,
                duration = _ref2$duration === undefined ? 0 : _ref2$duration,
                _ref2$sprite = _ref2.sprite,
                sprite = _ref2$sprite === undefined ? [] : _ref2$sprite,
                _ref2$startById = _ref2.startById,
                startById = _ref2$startById === undefined ? null : _ref2$startById,
                _ref2$endById = _ref2.endById,
                endById = _ref2$endById === undefined ? null : _ref2$endById,
                _ref2$afterById = _ref2.afterById,
                afterById = _ref2$afterById === undefined ? null : _ref2$afterById,
                _ref2$musicById = _ref2.musicById,
                musicById = _ref2$musicById === undefined ? null : _ref2$musicById,
                _ref2$musicStopById = _ref2.musicStopById,
                musicStopById = _ref2$musicStopById === undefined ? null : _ref2$musicStopById;

            var mapPos = this._getObjectTime(displayObject) + this._delayTime,
                startX = displayObject.x,
                // 动画 X 开始
            startY = displayObject.y,
                // 动画 Y 开始
            endX = x,
                // 动画 X 结束
            endY = y,
                // 动画 Y 结束
            initAlpha = displayObject.alpha,
                initScaleX = displayObject.scaleX,
                initScaleY = displayObject.scaleY,
                initSkewX = displayObject.skewX,
                initSkewY = displayObject.skewY,
                initRotation = displayObject.rotation,
                isMusic = false,
                isPlay = false,
                music = null,
                musicStop = null;

            var startPlayTime = 0; // 对象开始执行动画位置
            var endPlayTime = 0; // 对象结束执行动画位置

            if (top) {
                delay = -top;
            }

            if (startById) {
                startPlayTime = this._objects[startById].animation.startPlayTime + delay;
            } else if (afterById) {
                startPlayTime = this._objects[afterById].animation.endPlayTime + delay;
            } else if (endById) {
                startPlayTime = this._objects[endById].animation.endPlayTime - duration + delay;
            } else {
                if (mapPos + delay >= this.playLine) {
                    startPlayTime = mapPos + delay - this.playLine;
                } else {
                    startPlayTime = 0;
                }
            }

            if (endById) {
                endPlayTime = this._objects[endById].animation.endPlayTime;
            } else {
                endPlayTime = startPlayTime + duration;
            }

            if (musicById) {
                music = document.getElementById(musicById);
            }

            if (musicStopById) {
                musicStop = document.getElementById(musicStopById);
            }

            function _animate(rate) {
                var progress = rate / duration;

                if (sprite.length > 1) {
                    var length = sprite.length;
                    var durationSegment = duration / length;
                    var currentIndex = Math.min(rate / durationSegment | 0, length - 1);
                    displayObject.image = sprite[currentIndex];
                }

                if (endX || endX === 0) displayObject.x = progress * (endX - startX) + startX;
                if (endY || endY === 0) displayObject.y = progress * (endY - startY) + startY;
                if (scaleX || scaleX === 0) displayObject.scaleX = progress * (scaleX - initScaleX) + initScaleX;
                if (scaleY || scaleY === 0) displayObject.scaleY = progress * (scaleY - initScaleY) + initScaleY;
                if (skewX || skewX === 0) displayObject.skewX = progress * (skewX - initSkewX) + initSkewX;
                if (skewY || skewY === 0) displayObject.skewY = progress * (skewY - initSkewY) + initSkewY;
                if (rotation || rotation === 0) displayObject.rotation = progress * (rotation - initRotation) + initRotation;
                if (alpha || alpha === 0) displayObject.alpha = progress * (alpha - initAlpha) + initAlpha;
            }

            return {
                startPlayTime: startPlayTime,
                endPlayTime: endPlayTime,
                update: function update(rate) {

                    var progress = rate / duration;

                    if ((progress === 0 || progress === 1) && isPlay === false) {
                        return;
                    }

                    if (progress >= 1) {
                        progress = 1;
                        isPlay = false;
                    } else if (progress <= 0) {
                        progress = 0;
                        isPlay = false;
                    } else {
                        isPlay = true;
                    }

                    if (music) {
                        if (isMusic === false) {
                            music.currentTime = 0;
                            music.play();
                            isMusic = true;
                        } else if (isMusic === true && progress === 0) {
                            if (!music.paused) {
                                music.pause();
                                isMusic = false;
                            }
                        }
                    }

                    if (musicStop) {
                        if (!musicStop.paused) musicStop.pause();
                    }

                    _animate(rate);
                },
                set: function set(rate) {
                    if (isPlay) isPlay = false;
                    if (isMusic) isMusic = false;

                    _animate(rate);
                }
            };
        }
    }, {
        key: '_getObjectTime',
        value: function _getObjectTime(displayObject) {
            var sum = this._isVertical ? displayObject.y : displayObject.x;
            var _this = this;

            _countTime(displayObject);

            return sum;

            function _countTime(displayObject) {
                var parent = displayObject.parent;

                if (parent && parent.name !== '_timeline') {
                    sum += _this._isVertical ? parent.y : parent.x;
                    _countTime(parent);
                }
            }
        }

        // 初始化手势

    }, {
        key: '_initTouchEvent',
        value: function _initTouchEvent() {
            var _this8 = this;

            this.canvas.addEventListener('touchstart', function (e) {
                if (_this8._isVertical) {
                    _this8._touchData.touchstart = e.touches[0].clientY;
                } else {
                    _this8._touchData.touchstart = e.touches[0].clientX;
                }

                _this8._touchData.isInertance = false;
                _this8._touchData.isMoving = false;
            });

            this.canvas.addEventListener('touchmove', function (e) {
                if (_this8._isVertical) {
                    _this8._touchData.touchmove = e.touches[0].clientY - _this8._touchData.touchstart;
                    _this8._touchData.touchstart = e.touches[0].clientY;
                } else {
                    _this8._touchData.touchmove = e.touches[0].clientX - _this8._touchData.touchstart;
                    _this8._touchData.touchstart = e.touches[0].clientX;
                }
                _this8._touchData.isMoving = true;
            });

            this.canvas.addEventListener('touchend', function () {
                _this8._touchData.isInertance = true;
            });
        }
    }, {
        key: '_initTouchData',
        value: function _initTouchData() {
            this._touchData.touchstart = 0;
            this._touchData.touchmove = 0;
            this._touchData.isInertance = false;
            this._touchData.isMoving = false;
        }
    }, {
        key: '_stats',
        value: function _stats() {
            this.stats = new Stats();
            this.stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
            document.body.appendChild(this.stats.dom);
        }
    }]);

    return TimeGallery;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
